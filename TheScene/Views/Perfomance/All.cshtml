@model AllPerfomanceQueryModel

@{
    ViewBag.Title = "All Perfomances";
}

<h1 class="text-center">@ViewBag.Title</h1>
<hr />

<form method="get">

    <div class="row d-flex justify-content-center">
        <div class="col col-11 form-group">
            <input asp-for="SearchTerm" class="form-control" placeholder="Search">
        </div>


        <div class="col col-1 form-group">
            <input type="submit" value="Search" class="btn btn-primary" />
        </div>


    </div>

    <div class="row d-flex justify-content-around">
        <div class="col form-group">
            <label asp-for="Genre"></label>
            <select asp-for="Genre" class="form-control">
                <option value="">All</option>
                @foreach (var genre in Model.Genres)
                {
                    <option value="@genre">@genre</option>
                }
            </select>
        </div>

        <div class="col form-group">
            <label asp-for="PerfomanceType"></label>
            <select asp-for="PerfomanceType" class="form-control">
                <option value="">All</option>
                @foreach (var perfType in Model.PerfomanceTypes)
                {
                    <option value="@perfType">@perfType</option>
                }
            </select>
        </div>

        <div class="col form-group">
            <div class="form-group">
                <label asp-for="Sorting"></label>
                <select asp-for="Sorting" class="form-control">
                    <option value="0">Title</option>
                    <option value="1">PerfomanceType</option>
                    <option value="1">Genre</option>
                </select>
            </div>
        </div>
    </div>
</form>

<hr />

@if (!Model.Perfomances.Any())
{
    <h2 class="text-center">No Perfomances found by the given criteria!</h2>
}

<div class="row">
    @foreach (var ev in Model.Perfomances)
    {
        <partial name="_PerfomancePartial" model="@ev" />
    }
</div>

@{
    var previousPage = Model.CurrentPage - 1;
    if (previousPage < 1)
    {
        previousPage = 1;
    }

    var maxPage = Math.Ceiling((double)Model.TotalPerfomanceCount /
        AllPerfomanceQueryModel.PerfomancePerPage);
}

<div class="row mb-5">
    <div class="col-md-6 d-grid gap-2 d-md-flex justify-content-md-start">
        <a class="btn btn-primary @(Model.CurrentPage == 1 ? "disabled" : string.Empty)"
           asp-controller="Perfomance"
           asp-action="All"
           asp-route-currentPage="@previousPage"
           asp-route-genre="@Model.Genre"
           asp-route-perfomanceType="@Model.PerfomanceType"
           asp-route-searchTerm="@Model.SearchTerm"
           asp-route-sorting="@((int)Model.Sorting)"><<</a>
    </div>

    @{
        var shouldButtonBeDisabled = Model.CurrentPage == maxPage ||
        !Model.Perfomances.Any();
    }

    <div class="col-md-6 d-grid gap-2 d-md-flex justify-content-md-end">
        <a class="btn btn-primary
           @(shouldButtonBeDisabled ? "disabled" : string.Empty)"
           asp-controller="Perfomance"
           asp-action="All"
           asp-route-currentPage="@(Model.CurrentPage + 1)"
           asp-route-genre="@Model.Genre"
           asp-route-perfomanceType="@Model.PerfomanceType"
           asp-route-searchTerm="@Model.SearchTerm"
           asp-route-sorting="@((int)Model.Sorting)">>></a>
    </div>
</div>

